{"version":3,"sources":["InfoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","isRed","isOrange","active","total","props","Card","className","onClick","CardContent","Typography","color","casesTypeColors","hex","multipler","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","map","country","Circle","center","countryInfo","lat","long","fillOpacity","fillCollor","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","countries","zoom","TileLayer","url","attribution","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","res","json","fetchData","length","datasets","backgroundColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e3bde025.chunk.js","sourcesContent":["import React from 'react';\r\nimport './InfoBox.css';\r\nimport { Card, CardContent, Typography } from '@material-ui/core'\r\n\r\nfunction InfoBox({ title, cases, isRed, isOrange, active, total, ...props }) {\r\n    return (\r\n        \r\n        <Card \r\n        className={`infoBox ${active && 'infobox--selected'} ${isRed && \"infoBox--red\"} ${isOrange && \"infoBox--orange\"}`}\r\n        onClick={props.onClick}\r\n        >\r\n            <CardContent>\r\n                <Typography className=\"title\" color=\"textSecondary\">\r\n                    <p className=\"infoBox__p\">{title}</p>\r\n                    \r\n                </Typography>\r\n\r\n                <h2 className={`infoBox__cases ${isOrange && \"infoBox__cases--orange\"} ${!isOrange && !isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\r\n                <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n                    <p className=\"infoBox__p\">{total} Total</p>\r\n                </Typography>\r\n            </CardContent>\r\n        </Card>\r\n        \r\n    )\r\n}\r\n\r\nexport default InfoBox\r\n","import React from 'react';\r\nimport numeral from 'numeral';\r\nimport {Circle, Popup} from 'react-leaflet';\r\n\r\nconst casesTypeColors = {\r\n    cases: {\r\n        hex: 'orange',\r\n        multipler: 100000,\r\n    },\r\n    recovered: {\r\n        hex: 'lightgreen',\r\n        multipler: 100000,\r\n    },\r\n    deaths: {\r\n        hex: 'red',\r\n        multipler: 100000,\r\n    },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n    const sortedData = [...data];\r\n\r\n    return sortedData.sort((a,b) => (a.cases > b.cases ? -1 : 1));\r\n\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n    stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\nexport const showDataOnMap = (data, casesType=\"cases\") =>(\r\n    data.map(country=>(\r\n        <Circle\r\n        center={[country.countryInfo.lat, country.countryInfo.long]}\r\n        fillOpacity={0.4}\r\n        color={casesTypeColors[casesType].hex}\r\n        fillCollor={casesTypeColors[casesType].hex}\r\n        radius={\r\n            Math.sqrt(country[casesType] * casesTypeColors[casesType].multipler)\r\n        }\r\n        >\r\n            <Popup>\r\n                <div className=\"info-container\">\r\n                    <div className=\"info-flag\" style={{backgroundImage: `url(${country.countryInfo.flag})`}}></div>\r\n                    <div className=\"info-name\">{country.country}</div>\r\n                    <div className=\"info-confirmed\">Cases: {numeral(country.cases).format(\"0,0\")}</div>\r\n                    <div className=\"info-recovered\">Recovered: {numeral(country.recovered).format(\"0,0\")}</div>\r\n                    <div className=\"info-deaths\">Deaths: {numeral(country.deaths).format(\"0,0\")}</div>\r\n                </div>\r\n            </Popup>\r\n        </Circle>\r\n    ))\r\n);","import React from 'react';\r\nimport \"./Map.css\";\r\nimport { Map as LeafletMap , TileLayer } from \"react-leaflet\";\r\nimport {showDataOnMap} from './util';\r\nfunction Map({countries,casesType,center,zoom}) {\r\n    return (\r\n        <div className=\"map\">\r\n            <LeafletMap center={center} zoom={zoom}>\r\n                <TileLayer \r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                />\r\n                {showDataOnMap(countries, casesType)}\r\n            </LeafletMap>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Map\r\n","import React from 'react'\r\nimport numeral from 'numeral'\r\nimport './Table.css'\r\n\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({country,cases}) =>(\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td><strong>{numeral(cases).format('0,0')}</strong></td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport numeral from 'numeral';\r\n\r\nconst options = {\r\n    legend: {\r\n        display:false,\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n        },\r\n    },\r\n    maintainAspectRatio: false,\r\n    tooltips: {\r\n        mode: \"index\",\r\n        intersect: false,\r\n        callbacks: {\r\n            label: function(tooltipItem,data){\r\n                return numeral(tooltipItem.value).format(\"+0,0\");\r\n            },\r\n        },\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                type: \"time\",\r\n                time: {\r\n                    format: \"MM/DD/YY\",\r\n                    tooltipFormat: \"ll\",\r\n                },\r\n            },\r\n        ],\r\n        yAxes: [\r\n            {\r\n                gridLines: {\r\n                    display: false,\r\n                },\r\n                ticks:{\r\n                    callback: function(value, index,values){\r\n                        return numeral(value).format(\"0a\");\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    },\r\n}\r\n\r\nconst buildChartData = (data, casesType) => {\r\n    let chartData = [];\r\n    let lastDataPoint;\r\n\r\n    for(let date in data.cases) {\r\n        if(lastDataPoint){\r\n            const newDataPoint = {\r\n                x: date,\r\n                y: data[casesType] [date] - lastDataPoint,\r\n            };\r\n            chartData.push(newDataPoint);\r\n        }\r\n        lastDataPoint = data[casesType][date];\r\n    };\r\n    return chartData;\r\n}\r\n\r\nfunction LineGraph({casesType=\"cases\", ...props}) {\r\n    const [data, setData] = useState({});\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=180')\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                let chartData = buildChartData(data, casesType);\r\n                setData(chartData);\r\n            })\r\n        }\r\n        fetchData();\r\n    }, [casesType])\r\n\r\n\r\n    return (\r\n        <div className={props.className}>\r\n            {data?.length >0 &&(\r\n                <Line \r\n                options={options}\r\n                data={{\r\n                    datasets: [{data: data, backgroundColor: 'lightgreen',}],\r\n                }}\r\n                />\r\n            )}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LineGraph\r\n","import './App.css';\nimport {\n  Card,\n  CardContent,\n  MenuItem,\n  FormControl,\n  Select\n} from '@material-ui/core';\nimport React, { useEffect, useState } from 'react';\nimport InfoBox from './InfoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport { sortData, prettyPrintStat } from './util';\nimport LineGraph from './LineGraph';\nimport \"leaflet/dist/leaflet.css\";\n\nconst App = () => {\n\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(4);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState('cases');\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n    .then(res => res.json())\n    .then((data)=>{\n      setCountryInfo(data);\n    })\n  }, [])\n\n  useEffect(() => {\n    \n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n      .then((res)=> res.json())\n      .then((data)=>{\n        const countries = data.map((country)=>({\n            name: country.country,\n            value: country.countryInfo.iso2\n          }));\n\n          const sortedData = sortData(data)\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n      });\n    };\n    getCountriesData()\n  }, []);\n\n  const onCountryChange = async (e) =>{\n    const countryCode = e.target.value;\n\n    const url = countryCode === 'worldwide' ? \"https://disease.sh/v3/covid-19/all\" :\n    `https://disease.sh/v3/covid-19/countries/${countryCode}`\n\n    await fetch(url)\n    .then(res => res.json())\n    .then(data => {\n      setCountry(countryCode);\n      setCountryInfo(data);\n    \n      setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n      setMapZoom(4);\n    });\n  };\n\n\n  return (\n    <div className=\"app\">  \n      <div className=\"app__left\">\n        <div className=\"app__header\">\n            <h1>COVID-19 TRACKER</h1>\n            <FormControl className=\"app__dropdown\">\n              <Select  variant=\"outlined\" onChange={onCountryChange} value={country}>\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n                {\n                  countries.map(country=>(\n                    <MenuItem value={country.value}>{country.name}</MenuItem>\n                  ))\n                }\n              </Select>\n            </FormControl>    \n          </div>\n          \n        <div className=\"app__stats\">\n\n          <InfoBox\n          isOrange\n          active={casesType === \"cases\"}\n          onClick={e => setCasesType('cases')}\n          title=\"Cases\" \n          cases={prettyPrintStat(countryInfo.todayCases)} \n          total={prettyPrintStat(countryInfo.cases)}\n          />\n\n          <InfoBox \n          active={casesType === \"recovered\"}\n          onClick={e => setCasesType('recovered')}\n          title=\"Recovered\" \n          cases={prettyPrintStat(countryInfo.todayRecovered)} \n          total={prettyPrintStat(countryInfo.recovered)}\n          />\n\n          <InfoBox\n          isRed\n          active={casesType === \"deaths\"}\n          onClick={e => setCasesType('deaths')}\n          title=\"Deaths\" \n          cases={prettyPrintStat(countryInfo.todayDeaths)} \n          total={prettyPrintStat(countryInfo.deaths)}\n          />\n\n        </div>\n\n\n        <Map \n        casesType={casesType}\n        countries={mapCountries}\n        center={mapCenter}\n        zoom={mapZoom}\n        />\n\n      </div>\n      \n      <Card className=\"app_right\">\n        <CardContent>\n          <h3>Live cases by country</h3>\n          <Table countries={tableData}/>\n          <br/>\n          <h3>Worldwide new {casesType}</h3>\n          <br/>\n          <LineGraph className=\"app__graph\" casesType={casesType} />\n        </CardContent>\n      </Card>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}